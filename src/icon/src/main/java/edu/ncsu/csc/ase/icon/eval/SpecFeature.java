package edu.ncsu.csc.ase.icon.eval;

import java.util.ArrayList;
import java.util.List;
import java.util.regex.Pattern;

public class SpecFeature 
{
	public static String textCorrection(String text)
	{
		text = text.replaceAll(Pattern.quote("&∨g.eclipse.jdt.core.dom.QualifiedName&&"), "XX");
		text = text.replaceAll(Pattern.quote("connect unconnected"), "not connected");
		text = text.replaceAll(Pattern.quote("connect connected"), "connected");
		text = text.replaceAll(Pattern.quote("in in .available()"), "in_availableMTD");
		text = text.replace("out.write(csq.subSequence(start, end).toString())","CODE1");
		text = text.replace("toURI toURI ()).equals( f.","CODE2");
		text = text.replace("\"..\"","\"DOTDOT\"");
		text = text.replace("\".tmp\"","\"DOT_tmp\"");
		text = text.replace("'.'MM","'DOT'MM");
		text = text.replace("Console con = System.console(); if (con != null) { Scanner sc = new Scanner(con.reader());","CODE3");
		text = text.replace(".).",").");
		text = text.replace("out.append(csq, start, end)","CODE4");
		text = text.replace("out.print(csq.subSequence(start, end).toString())","CODE5");
		text = text.replace("Thread.currentThread().interrupt();","CODE6");
		text = text.replace("Console con = System.console(); if (con != null) { Scanner sc = new Scanner(con.reader()); .", "CODE7");
		text = text.replace("new File File ( f.toURI()).equals( f.","CODE8");
		return text;
		
	}
	
	
	public static List<String> stopwords()
	{
		List<String> lst = new ArrayList<String>();
		lst.add("frag_np_pp");
		lst.add("adjp_s");
		lst.add("vp_adjp_sbar");
		lst.add("vp_adjp_advp");
		lst.add("vp_adjp_s_sbar");
		lst.add("vp_advp_np");
		lst.add("vp_pp_s");
		lst.add("vp_pp_sbar");
		lst.add("sbar_whadvp_s");
		lst.add("np_advp_np_sbar");
		lst.add("whnp_pp");
		lst.add("vp_prt_np_pp");
		lst.add("sbar_whpp_s");
		lst.add("whpp_whnp");
		lst.add("vp_advp_np_sbar");
		lst.add("vp_advp_s");
		lst.add("pp_conjp_pp");
		lst.add("vp_prn");
		lst.add("s_np_adjp");
		lst.add("vp_prt_np");
		lst.add("vp_prn_vp");
		lst.add("prn_pp");
		lst.add("vp_pp_np");
		lst.add("np_prn_pp");
		lst.add("sinv_s_advp_np");
		lst.add("sinv_vp_np_pp");
		lst.add("vp_pp_advp");
		lst.add("adjp_np-tmp_pp");
		lst.add("adjp_qp");
		lst.add("s_np_prn_np_vp");
		lst.add("vp_adjp_pp");
		lst.add("vp_np_vp");
		lst.add("vp_prt");
		lst.add("np_sbar_np");
		lst.add("adjp_np-tmp");
		lst.add("vp_advp_prt");
		lst.add("np_advp_np_pp");
		lst.add("vp_advp_np_s");
		lst.add("advp_pp");
		lst.add("s_np");
		lst.add("root_pp");
		lst.add("pp_prn_np");
		lst.add("vp_advp_sbar");
		lst.add("sbar_frag");
		lst.add("frag_advp");
		lst.add("advp_sbar");
		lst.add("np_ucp");
		lst.add("ucp_adjp_pp");
		lst.add("pp_advp_np");
		lst.add("advp_np");
		lst.add("pp_advp_pp");
		lst.add("vp_advp_np_pp");
		lst.add("np_adjp_pp");
		lst.add("adjp_np");
		lst.add("vp_sbar_pp");
		lst.add("sbar_np_s");
		lst.add("vp_np-tmp");
		lst.add("root_sbar");
		lst.add("vp_np_frag");
		lst.add("frag_adjp");
		lst.add("np_conjp_np");
		lst.add("s_pp");
		lst.add("adjp_sbar");
		lst.add("s_advp_s");
		lst.add("vp_np_prn");
		lst.add("vp_adjp_ucp");
		lst.add("ucp_pp_s");
		lst.add("sinv_advp_np");
		lst.add("frag_np_sbar");
		lst.add("frag_s_np");
		lst.add("s_np_advp_np_vp");
		lst.add("np_pp_np");
		lst.add("vp_adjp_advp_sbar");
		lst.add("s_sbar");
		lst.add("vp_advp_pp_sbar");
		lst.add("vp_np_advp_np");
		lst.add("s_pp_prn_sbar_np_vp");
		lst.add("np_conjp_np_sbar");
		lst.add("vp_adjp_advp_pp");
		lst.add("s_sbar_np_advp");
		lst.add("sbar_whadjp_s");
		lst.add("np_np-tmp_sbar");
		lst.add("np_np-tmp");
		lst.add("sbar_advp_s");
		lst.add("np_pp_sbar");
		lst.add("s_advp_pp_s_vp");
		lst.add("ucp_adjp_advp_pp");
		lst.add("np_x");
		lst.add("vp_prn_np");
		lst.add("s_pp_advp_np_advp");
		lst.add("np_rrc_prn");
		lst.add("rrc_advp_np");
		lst.add("prn_adjp");
		lst.add("s_pp_sbar_np_vp");
		lst.add("s_vp_pp");
		lst.add("vp_pp_prn_sbar");
		lst.add("s_advp_sbar_np_vp");
		lst.add("s_pp_np_prn_vp");
		lst.add("vp_adjp_pp_sbar");
		lst.add("s_pp_vp");
		lst.add("vp_pp_vp");
		lst.add("vp_prt_s");
		lst.add("pp_np_advp");
		lst.add("s_intj_s");
		lst.add("np_pp_adjp");
		lst.add("s_pp_s");
		lst.add("vp_np_advp_s");
		lst.add("pp_prn");
		lst.add("pp_advp");
		lst.add("s_sbar_advp_s");
		lst.add("np_advp_sbar");
		lst.add("s_sbar_s_vp");
		lst.add("prn_sbar");
		lst.add("vp_adjp_np");
		lst.add("vp_prn_sbar");
		lst.add("s_pp_s_vp");
		lst.add("np_adjp_prn");
		lst.add("np_prn_sbar");
		lst.add("vp_sbar_prn");
		lst.add("whadvp_np");
		lst.add("np_rrc");
		lst.add("rrc_pp_np");
		lst.add("s_np_s_vp");
		lst.add("vp_s_prn");
		lst.add("s_frag_s");
		lst.add("vp_np_ucp_advp_pp");
		lst.add("ucp_adjp");
		lst.add("np_adjp_np");
		lst.add("np_s_vp_pp");
		lst.add("vp_advp_prn");
		lst.add("np_frag");
		lst.add("adjp_advp");
		lst.add("vp_np_prn_s");
		lst.add("vp_pp_advp_sbar");
		lst.add("vp_np-tmp_pp");
		lst.add("vp_advp_np_pp_s");
		lst.add("sinv_vp_np_sbar");
		lst.add("np_advp_pp");
		lst.add("vp_adjp_prn");
		lst.add("prn_frag");
		lst.add("vp_adjp_advp_adjp");
		lst.add("vp_pp_prn");
		lst.add("ucp_np_adjp_vp");
		lst.add("vp_np_prn_pp");
		lst.add("ucp_np_advp");
		lst.add("np_advp_np");
		lst.add("s_np-tmp_vp");
		lst.add("np_s_np");
		lst.add("vp_advp_pp_np");
		lst.add("advp_np_advp");
		lst.add("vp_prt_pp_np");
		lst.add("advp_np_pp");
		lst.add("np_whpp");
		lst.add("s_advp_pp_vp");
		lst.add("s_prn_s");
		lst.add("s_advp_s_vp");
		lst.add("vp_advp_pp_s");
		lst.add("vp_np_advp_sbar");
		lst.add("sbar_advp_whadvp_s");
		lst.add("vp_np_pp_s_sbar");
		lst.add("s_sbar_pp_vp");
		lst.add("s_prn_np_vp");
		lst.add("s_pp_sbar_vp");
		lst.add("s_prn_vp");
		lst.add("s_ucp");
		lst.add("ucp_advp_pp");
		lst.add("np_pp_advp");
		lst.add("np_vp_advp");
		lst.add("sbar_whadvp_prn_s");
		lst.add("np_sbar_prn");
		lst.add("s_np_prn_vp");
		lst.add("vp_s_vp");
		lst.add("s_lst_np_vp");
		lst.add("vp_pp_adjp");
		lst.add("ucp_np_s");
		lst.add("np_vp_sbar");
		lst.add("whnp_adjp");
		lst.add("vp_prn_pp_s");
		lst.add("vp_s_sbar");
		lst.add("sinv_s_vp_np");
		lst.add("vp_s_np");
		lst.add("frag_vp");
		lst.add("frag_conjp_s");
		lst.add("s_frag_np_vp");
		lst.add("prn_advp_np");
		lst.add("np_pp_x");
		lst.add("np_pp_prn");
		lst.add("frag_x_np");
		lst.add("frag_advp_sbar");
		lst.add("root_s");
		lst.add("s_vp");
		lst.add("vp_np");
		lst.add("np_pp");
		lst.add("pp_np");
		lst.add("s_np_vp");
		lst.add("vp_pp");
		lst.add("root_np");
		return lst;
	}
	
	public static List<String> posStopWords()
	{
		List<String> lst = new ArrayList<String>();
		lst.add("serialize_vbn");
		lst.add("follow_vbz");
		lst.add("stack_vbp");
		lst.add("declare_vbg");
		lst.add("correspond_vbg");
		lst.add("execute_vbg");
		lst.add("result_vbz");
		lst.add("find_vbn");
		lst.add("deserialize_vbg");
		lst.add("overriden_vbn");
		lst.add("transitively_rb");
		lst.add("reconstruct_vbn");
		lst.add("completely_rb");
		lst.add("restore_vbn");
		lst.add("execute_vbn");
		lst.add("base_vbn");
		lst.add("individually_rb");
		lst.add("deserialize_vbn");
		lst.add("leave_vb");
		lst.add("up_rb");
		lst.add("ignore_vb");
		lst.add("recover_vb");
		lst.add("occur_vbn");
		lst.add("consider_vb");
		lst.add("enable_vb");
		lst.add("replace_vbn");
		lst.add("enable_vbn");
		lst.add("enable_vbp");
		lst.add("enable_vbg");
		lst.add("expect_vbz");
		lst.add("override_vb");
		lst.add("override_vbn");
		lst.add("trust_vbn");
		lst.add("construct_vbd");
		lst.add("expect_vbn");
		lst.add("verify_vb");
		lst.add("verify_vbz");
		lst.add("prevent_vbz");
		lst.add("readunshare_vbn");
		lst.add("return_vbg");
		lst.add("obtain_vbn");
		lst.add("specifically_rb");
		lst.add("deserialize_vb");
		lst.add("handle_vb");
		lst.add("invalidate_vbz");
		lst.add("define_vb");
		lst.add("elsewhere_rb");
		lst.add("readunshare_vbd");
		lst.add("manipulate_vbn");
		lst.add("override_vbp");
		lst.add("possess_vbg");
		lst.add("instantiate_vb");
		lst.add("such_pdt");
		lst.add("during_in");
		lst.add("validate_vbn");
		lst.add("reconstitute_vbn");
		lst.add("register_vb");
		lst.add("receive_vb");
		lst.add("back_rb");
		lst.add("earlier_rbr");
		lst.add("process_vbn");
		lst.add("substitute_vb");
		lst.add("replace_vbg");
		lst.add("request_vbg");
		lst.add("resolve_vb");
		lst.add("insure_vb");
		lst.add("unintentionally_rb");
		lst.add("expose_vbn");
		lst.add("substitute_vbn");
		lst.add("abort_vbp");
		lst.add("raise_vbg");
		lst.add("encounter_vbn");
		//lst.add("redirect_vbn");
		lst.add("allow_vbg");
		lst.add("wish_vb");
		lst.add("receive_vbg");
		lst.add("produce_vbd");
		lst.add("occur_vbp");
		lst.add("leave_vbn");
		lst.add("retrieve_vb");
		lst.add("buffer_vb");
		lst.add("hold_vbz");
		lst.add("disregard_vb");
		lst.add("refer_vbn");
		lst.add("serialize_vbg");
		lst.add("between_in");
		lst.add("save_vb");
		lst.add("deem_vbz");
		lst.add("annotate_vb");
		lst.add("store_vb");
		lst.add("trust_vbd");
		lst.add("oppose_vbn");
		lst.add("contain_vbp");
		lst.add("expect_vbg");
		lst.add("replace_vbd");
		lst.add("backwards_rb");
		lst.add("avoid_vb");
		lst.add("introduce_vbg");
		lst.add("sometimes_rb");
		lst.add("identify_vb");
		lst.add("customize_vb");
		lst.add("reconstitute_vb");
		lst.add("internally_rb");
		lst.add("customize_vbn");
		lst.add("prepend_vb");
		lst.add("point_vbg");
		lst.add("appear_vbg");
		lst.add("treat_vbn");
		lst.add("object_vb");
		lst.add("conflict_vb");
		lst.add("above_in");
		lst.add("look_vb");
		lst.add("operate_vbn");
		lst.add("reflect_vbp");
		lst.add("locally_rb");
		lst.add("remove_vbz");
		lst.add("enqueue_vbn");
		lst.add("find_vb");
		lst.add("look_vbz");
		lst.add("evolve_vbn");
		lst.add("agree_vbp");
		lst.add("govern_vb");
		lst.add("document_vbn");
		lst.add("describe_vbz");
		lst.add("correspond_vbz");
		lst.add("compare_vb");
		lst.add("i_prp");
		lst.add("int_vbp");
		lst.add("connect_vbn");
		lst.add("pipe_vbn");
		lst.add("connect_vb");
		lst.add("pipe_vbd");
		lst.add("close_vbd");
		lst.add("exceed_vbz");
		lst.add("receive_vbz");
		lst.add("receive_vbn");
		lst.add("break_vbn");
		lst.add("notify_vbz");
		lst.add("wait_vbg");
		lst.add("notify_vb");
		lst.add("connect_vbz");
		lst.add("tell_vb");
		lst.add("print_vbn");
		lst.add("whenever_wrb");
		lst.add("terminate_vb");
		lst.add("invoke_vbz");
		lst.add("apply_vbn");
		lst.add("translate_vbn");
		lst.add("take_vbg");
		lst.add("produce_vbn");
		lst.add("close_vbg");
		lst.add("do_vbg");
		lst.add("clear_vbz");
		lst.add("open_vbg");
		lst.add("inherit_vbn");
		lst.add("suppress_vb");
		lst.add("initialize_vbn");
		lst.add("push_vbn");
		lst.add("recently_rb");
		lst.add("whatever_wdt");
		lst.add("push_vbz");
		lst.add("back_rp");
		lst.add("copy_vbg");
		lst.add("forth_rb");
		lst.add("push_vb");
		lst.add("optionally_rb");
		lst.add("specify_vbz");
		lst.add("require_vbp");
		lst.add("update_vbp");
		lst.add("synchronously_rb");
		lst.add("work_vbp");
		lst.add("much_rb");
		lst.add("like_in");
		lst.add("pass_vbg");
		lst.add("respectively_rb");
		lst.add("apply_vbp");
		lst.add("ensure_vbg");
		lst.add("lose_vbn");
		lst.add("reside_vb");
		lst.add("reduce_vb");
		lst.add("generally_rb");
		lst.add("perform_vb");
		lst.add("reopen_vbn");
		lst.add("successively_rb");
		lst.add("reach_vbz");
		lst.add("set_vbg");
		lst.add("extend_vbn");
		lst.add("desire_vbn");
		lst.add("versa_rb");
		lst.add("see_vbn");
		lst.add("although_in");
		lst.add("give_vbz");
		lst.add("interpret_vbn");
		lst.add("reach_vbg");
		lst.add("remember_vbg");
		lst.add("exhaust_vbn");
		lst.add("try_vbz");
		lst.add("int_vb");
		lst.add("parse_vbz");
		lst.add("provide_vbg");
		lst.add("about_in");
		lst.add("sit_vb");
		lst.add("parse_vb");
		lst.add("start_vbz");
		lst.add("clear_vbn");
		lst.add("determine_vbz");
		lst.add("treat_vbz");
		lst.add("end_vbg");
		lst.add("serve_vb");
		lst.add("lowercase_vbn");
		lst.add("make_vbg");
		lst.add("interfere_vb");
		lst.add("encounter_vbz");
		lst.add("put_vbg");
		lst.add("match_vbg");
		lst.add("delimit_vb");
		lst.add("recognize_vbn");
		lst.add("consist_vbg");
		lst.add("recognize_vbz");
		lst.add("extend_vbz");
		lst.add("specially_rb");
		lst.add("recognize_vb");
		lst.add("serve_vbp");
		lst.add("cause_vbz");
		lst.add("cause_vbp");
		lst.add("indicate_vbp");
		lst.add("expand_vbn");
		lst.add("hold_vbg");
		lst.add("cause_vbg");
		lst.add("terminate_vbd");
		return lst;
	}
	public static List<String> getStartingVerbList()
	{
		List<String> verbList = new ArrayList<>();
		verbList.add("marks ");
		verbList.add("tests ");
		verbList.add("flushes ");
		verbList.add("skips ");
		verbList.add("returns ");
		verbList.add("converts ");
		verbList.add("sets ");
		verbList.add("checks ");
		verbList.add("repositions ");
		verbList.add("causes ");
		verbList.add("prints ");
		verbList.add("resets ");
		verbList.add("for example ");
		verbList.add("for example,");
		return verbList;
	}
	
	public static List<String> getSpecKeywords()
	{
		List<String> verbList = new ArrayList<>();
		verbList.add("if ");
		verbList.add("must ");
		verbList.add("will ");
		verbList.add("can ");
		verbList.add("could ");
		verbList.add("may ");
		verbList.add("should ");
		verbList.add("invoke ");
		verbList.add("invoking ");
		verbList.add("has been ");
		verbList.add("before ");
		verbList.add("after ");
		return verbList;
	}
	
}
